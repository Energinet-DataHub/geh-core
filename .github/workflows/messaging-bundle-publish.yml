# Copyright 2020 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Publish Messaging bundle

on:
  # Build, test, pack and publish release packages
  # Only executed if (*.)Messaging packages content or build scripts has changed; not if solution file, documentation or tests has changed
  push:
    branches:
      - main
    paths:
      - source/Messaging/source/Messaging/**
      - source/Messaging/source/Messaging.Integration.ServiceCollection/**
      - source/Messaging/source/Messaging.Protobuf/**
      - source/Messaging/source/Messaging.Protobuf.Integration.ServiceCollection/**
      - .github/workflows/messaging-bundle-publish.yml
  # Build, test, pack
  # Executed if Messaging folder or build scripts has changed; including if documentation or tests has changed
  pull_request:
    branches:
      - main
    paths:
      - source/Messaging/**
      - .github/workflows/messaging-bundle-publish.yml
  # Build, test, pack and publish prerelease packages
  # Executed if manually triggered
  workflow_dispatch: {}

env:
  SOLUTION_FILE_PATH: source/Messaging/Messaging.sln
  BUILD_CONFIGURATION: Release
  # Conditions
  PUSH_PACKAGES: ${{ github.event_name != 'pull_request' }}
  # Tool versions
  DOTNET_VERSION: '5.0.202'
  AZURITE_VERSION: '3.14.0'

jobs:
  build_and_publish:
    runs-on: windows-latest
    name: Publish bundle to NuGet.org

    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@master

      - name: Setup .NET ${{ env.DOTNET_VERSION }} environment
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Cache NuGet packages
        uses: actions/cache@v2
        id: cache-nuget
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }} #hash of project files
          restore-keys: |
            ${{ runner.os }}-nuget-
      
      - name: Restore NuGet packages
        run: dotnet restore ${{ env.SOLUTION_FILE_PATH }}

      - name: Build solution
        run: dotnet build ${{ env.SOLUTION_FILE_PATH }} --no-restore --configuration ${{ env.BUILD_CONFIGURATION }}

      - name: Run tests and publish report
        run: |
          dotnet tool install --tool-path ./temp/reportgenerator dotnet-reportgenerator-globaltool
          dotnet test ${{ env.SOLUTION_FILE_PATH }} --no-build --configuration ${{ env.BUILD_CONFIGURATION }} --verbosity normal --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover --output ${{ github.workspace }}\output

      - name: Upload code coverage
        uses: codecov/codecov-action@v2
        with:
          flags: messaging
          fail_ci_if_error: true
          verbose: true

      - name: Get version suffix property value
        uses: ./.github/actions/get-version-suffix
        id: get_version_suffix
      
      - name: Pack Messaging project
        run: dotnet pack ${{ env.PROJECT_PATH }} --configuration ${{ env.BUILD_CONFIGURATION }} --include-symbols -p:SymbolPackageFormat=snupkg -p:RepositoryCommit=${{ github.sha }} ${{ steps.get_version_suffix.outputs.version_suffix_property }}
        env:
          PROJECT_PATH: 'source/Messaging/source/Messaging/Messaging.csproj'
      
      - name: Pack Messaging Integration project
        run: dotnet pack ${{ env.PROJECT_PATH }} --configuration ${{ env.BUILD_CONFIGURATION }} --include-symbols -p:SymbolPackageFormat=snupkg -p:RepositoryCommit=${{ github.sha }} ${{ steps.get_version_suffix.outputs.version_suffix_property }}
        env:
          PROJECT_PATH: 'source/Messaging/source/Messaging.Integration.ServiceCollection/Messaging.Integration.ServiceCollection.csproj'
      
      - name: Pack Messaging Protobuf project
        run: dotnet pack ${{ env.PROJECT_PATH }} --configuration ${{ env.BUILD_CONFIGURATION }} --include-symbols -p:SymbolPackageFormat=snupkg -p:RepositoryCommit=${{ github.sha }} ${{ steps.get_version_suffix.outputs.version_suffix_property }}
        env:
          PROJECT_PATH: 'source/Messaging/source/Messaging.Protobuf/Messaging.Protobuf.csproj'
      
      - name: Pack Messaging Protobuf project
        run: dotnet pack ${{ env.PROJECT_PATH }} --configuration ${{ env.BUILD_CONFIGURATION }} --include-symbols -p:SymbolPackageFormat=snupkg -p:RepositoryCommit=${{ github.sha }} ${{ steps.get_version_suffix.outputs.version_suffix_property }}
        env:
          PROJECT_PATH: 'source/Messaging/source/Messaging.Protobuf.Integration.ServiceCollection/Messaging.Protobuf.Integration.ServiceCollection.csproj'

      - name: Check each NuGet package version does not exists (not looking at prereleases)
        if: ${{ env.PUSH_PACKAGES == 'true' }}
        uses: ./.github/actions/nuget-assert-release-version
        with:
          NUPKG_RECURSE_PATH: 'source/Messaging/source'
      
      - name: Push to NuGet.org
        if: ${{ env.PUSH_PACKAGES == 'true' }}
        run: dotnet nuget push ${{ env.NUPKG_FILTER_PATTERN }} --api-key ${{ secrets.NUGET_TOKEN }} --source ${{ env.NUGET_FEED_PATH }}
        env:
          NUPKG_FILTER_PATTERN: 'source/Messaging/source/**/*.nupkg'
          NUGET_FEED_PATH: 'https://api.nuget.org/v3/index.json'
